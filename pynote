Python基础:Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。

	数据类型 0b1001 0o1001 1001 0x1001
进制转换		2进制			8进制			10进制			16进制
2进制		-			bin(int(x, 8))	bin(int(x, 10))	bin(int(x, 16))
8进制	oct(int(x, 2))		-			oct(int(x, 10))	oct(int(x, 16))
10进制	int(x, 2)		int(x, 8)			-				int(x, 16)
16进制	hex(int(x, 2))	hex(int(x, 8))	hex(int(x, 10))			-
注意:int('x',2)表示2进制 结果返回为10进制整数

浮点数(小数):0.001,12.3e8(科学计数 e代表10)

10/3  ---> 3.33335 /除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数
10//3 ---> 3       //称为地板除，两个整数的除法仍然是整数
10%3  ---> 1       %余数运算，可以得到两个整数相除的余数
10**3 ---> 1000	   **为幂运算

字符串:以单引号'或双引号"括起来的任意文本
"I'm OK",'I\'m OK'---> I'm OK
\n 转义为新行
\t 转义为tab符
r'\\\asdf' r''表示''内部的字符串默认不转义
'''...'''的格式表示多行内容

布尔值
一个布尔值只有True、False两种值，要么是True，要么是False
布尔值可以用and、or和not运算。
True and True	---> True	and运算是与运算，只有所有都为True，and运算结果才是True
True or True	---> True	or运算是或运算，只要其中有一个为True，or运算结果就是True
True and False	---> False	ot运算是非运算，它是一个单目运算符，把True变成False，False变成True
True or False	---> True
False or False	---> False

空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值

	变量 变量名必须是大小写英文、数字和_的组合，且不能用数字开头
	等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量
a = 'ABC'时，Python解释器干了两件事情：
1.在内存中创建了一个'ABC'的字符串；
2.在内存中创建了一个名为a的变量，并把它指向'ABC'。

	字符串和编码 1byte = 8bit
ASCII编码是1个字节，而Unicode编码通常是2个字节
UTF-8编码(可变长编码)把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，
汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节
在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
ord('A') 获取字符的整数表示
chr(66) 把编码转换为对应的字符
由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。
如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。
Python对bytes类型的数据用带b前缀的单引号或双引号表示
'ABC'.encode('ascii')	---> b'ABC' 字符编码为字节
'中文'.encode('utf-8')	---> b'\xe4\xb8\xad\xe6\x96\x87'
b'ABC'.decode('ascii')	    字节解码为字符
b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')

字符串格式化
%运算符就是用来格式化字符串的。在字符串内部，
	%s表示用字符串替换，
	%x表示用十六进制整数替换，
	%d表示用整数替换，
	%f表示用浮点数替换
	%%转义%号
有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。
如果只有一个%?，括号可以省略。
print('%2d-%02d' % (3, 1)) 前面空2个字符/前面补2个0字符
print('%.2f' % 3.1415926) 小数有效位数为2位
''.format()
'{}x{}={}'.format(2,3,6)

	List 元素可变
classmates = ['Michael', 'Bob', 'Tracy']
len(classmates) ----> 3
用索引来访问list中每一个位置的元素，记得索引是从0开始的
classmates[0]		classmates.append('Adam')
classmates[-1] 		classmates.insert(1, 'Jack')
classmates[1:3]		classmates.pop()
classmates[1:]		classmates.pop(2)
classmates[:3]		classmates[1] = 'Sarah'
L[:10:2] 前10个数，每两个取一个
L[::5]	 所有数，每5个取一个
L[:] 同 L
注:[1:3]不包括3号位的数，只有2个元素
	tuple  元素不可变
tuple和list非常类似，但是tuple一旦初始化就不能修改
所以没有append()，insert()这样修改元素的方法
t = (1, 2)  () (1,) Not (1)

	条件判断
if   condition1:
	statement1
elif condition2:
	statement2
else:
	statement3
birth = int(input('birth:'))
input()返回的数据类型是str

	for...in...loop
for x in xxx:
	statement
	
	while loop
while True:
	statement
	
n = 1
while n <= 100:
    if n > 10: # 当n = 11时，条件满足，执行break语句
        break # break语句会结束当前循环
    print(n)
    n = n + 1
print('END')

n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)
break的作用是提前结束循环
continue的作用是提前结束本轮循环，并直接开始下一轮循环
break,continue通常都必须配合if语句使用

	字典dict 是一组key,value的集合{k1:v1, k2:v2, k3:v3...}
d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
d['Adam'] = 67 新增键值
'Thomas' in d   判断key时候存在
d.get('Thomas', -1) 不存在则返回-1
d.pop('Bob') 删除Bob的k,v
	
	set 是一组key的集合
无序和无重复元素的集合
s = set([1, 2, 3])
s.add(4)
s.remove(4)
两个set可以做数学意义上的交集、并集等操作
s1 & s2
s1 | s2

set的原理和dict一样，所以key不可以放入可变对象，
dict的value可以是可变对象


















